import numpy as np


def adjust_matrix_u(matrix):
    return [matrix[124], matrix[123], matrix[122], matrix[121],
            matrix[108], matrix[93], matrix[78], matrix[63],
            matrix[57], matrix[35], matrix[21], matrix[12],
            matrix[8], matrix[7], matrix[6]]


def adjust_matrix_v(matrix):
    return [matrix[123], matrix[122], matrix[121], matrix[120],
            matrix[115], matrix[109], matrix[102], matrix[63],
            matrix[29], matrix[28], matrix[19], matrix[11],
            matrix[9], matrix[8], matrix[7]]


expected_re_100_u = np.array([0.84123, 0.78871, 0.73722, 0.68717,
                     0.23151, 0.00332, -0.13641, -0.20581,
                     -0.21090, -0.15662, -0.10150, -0.06434,
                     -0.04775, -0.04192, -0.0371])

expected_re_100_v = np.array([-0.05906, -0.07391, -0.08864, -0.10313,
                     -0.016914, -0.22445, -0.24533, 0.05454,
                     0.17527, 0.17507, 0.16077, 0.12314,
                     0.10890, 0.10091, 0.09233])

results_re_100_u_full = np.array([-0.00299009, -0.00875699, -0.01432853, -0.01972153, -0.02495174, -0.03003397
    , -0.03498212, -0.03980923, -0.04452755, -0.04914856, -0.05368305, -0.05814108
    , -0.06253209, -0.06686486, -0.07114756, -0.07538773, -0.07959233, -0.08376772
    , -0.08791966, -0.09205333, -0.09617328, -0.10028349, -0.10438729, -0.10848738
    , -0.11258584, -0.11668407, -0.12078278, -0.12488201, -0.12898107, -0.13307855
    , -0.13717227, -0.14125931, -0.14533595, -0.14939769, -0.15343923, -0.15745444
    , -0.1614364, -0.16537737, -0.16926879, -0.17310133, -0.17686486, -0.18054849
    , -0.18414062, -0.18762895, -0.19100052, -0.19424179, -0.19733867, -0.20027661
    , -0.20304063, -0.20561546, -0.20798559, -0.21013537, -0.2120491, -0.21371117
    , -0.21510613, -0.21621881, -0.21703447, -0.21753886, -0.21771837, -0.21756015
    , -0.21705218, -0.2161834, -0.21494382, -0.21332457, -0.21131802, -0.2089178
    , -0.20611891, -0.20291772, -0.199312, -0.19530095, -0.19088518, -0.18606668
    , -0.18084876, -0.17523604, -0.16923432, -0.16285049, -0.15609244, -0.14896888
    , -0.14148923, -0.13366338, -0.12550157, -0.11701414, -0.10821129, -0.09910283
    , -0.08969795, -0.08000485, -0.07003049, -0.05978022, -0.04925741, -0.03846305
    , -0.02739535, -0.01604924, -0.00441592, 0.00751768, 0.01976945, 0.03236268
    , 0.04532666, 0.05869731, 0.07251778, 0.08683906, 0.10172054, 0.11723054
    , 0.13344664, 0.15045599, 0.16835532, 0.18725073, 0.20725715, 0.2284974
    , 0.25110072, 0.27520079, 0.30093311, 0.32843159, 0.35782447, 0.38922939
    , 0.42274769, 0.45845796, 0.49640901, 0.53661238, 0.57903459, 0.62358974
    , 0.67013253, 0.71845266, 0.76827095, 0.8192382, 0.87093748, 0.92289104
    , 0.97457273])

results_re_100_v_full = np.array([0.00769339, 0.02228102, 0.03608048, 0.04910532, 0.06137141, 0.07289659
    , 0.08370041, 0.09380383, 0.103229, 0.11199896, 0.12013743, 0.12766858
    , 0.13461683, 0.14100664, 0.1468623, 0.15220781, 0.15706673, 0.16146198
    , 0.16541578, 0.16894952, 0.1720837, 0.1748378, 0.17723027, 0.17927847
    , 0.18099863, 0.18240586, 0.18351409, 0.18433614, 0.18488366, 0.18516721
    , 0.18519627, 0.18497926, 0.18452358, 0.18383571, 0.18292116, 0.1817846
    , 0.1804299, 0.17886015, 0.17707775, 0.17508444, 0.17288138, 0.17046917
    , 0.16784795, 0.1650174, 0.16197683, 0.1587252, 0.15526121, 0.15158329
    , 0.1476897, 0.14357852, 0.13924775, 0.13469532, 0.12991913, 0.1249171
    , 0.11968723, 0.11422759, 0.10853644, 0.10261219, 0.09645352, 0.09005937
    , 0.08342904, 0.07656218, 0.0694589, 0.06211979, 0.05454601, 0.04673932
    , 0.03870219, 0.03043781, 0.02195026, 0.01324449, 0.00432648, -0.00479669
    , -0.01411675, -0.02362411, -0.03330778, -0.04315522, -0.05315226, -0.06328293
    , -0.07352937, -0.08387167, -0.09428775, -0.10475324, -0.11524134, -0.12572272
    , -0.1361654, -0.14653464, -0.15679293, -0.16689988, -0.17681224, -0.18648393
    , -0.19586609, -0.20490723, -0.21355338, -0.22174837, -0.22943415, -0.23655116
    , -0.24303888, -0.2488363, -0.2538827, -0.25811826, -0.26148496, -0.26392745
    , -0.26539393, -0.2658372, -0.26521559, -0.26349397, -0.26064469, -0.25664847
    , -0.2514952, -0.24518461, -0.2377268, -0.22914257, -0.21946361, -0.20873242
    , -0.19700203, -0.18433553, -0.17080535, -0.15649233, -0.1414847, -0.12587675
    , -0.10976758, -0.09325959, -0.07645706, -0.05946467, -0.04238611, -0.02532269
    , -0.0083722])

results_re_100_u = adjust_matrix_u(results_re_100_u_full)
results_re_100_v = adjust_matrix_v(results_re_100_v_full)

delta_expected_results_re_100_u = expected_re_100_u - results_re_100_u
delta_expected_results_re_100_v = expected_re_100_v - results_re_100_v

print("Reynold 100 u")
print(delta_expected_results_re_100_u)
print("Reynold 100 v")
print(delta_expected_results_re_100_v)